{
  "version": 3,
  "file": "example-api-client.js",
  "sources": [
    "ng://example-api-client/out/api.module.ts",
    "ng://example-api-client/out/model/teamMember.ts",
    "ng://example-api-client/out/api/api.ts",
    "ng://example-api-client/out/api/user.service.ts",
    "ng://example-api-client/out/api/team.service.ts",
    "ng://example-api-client/out/configuration.ts",
    "ng://example-api-client/out/variables.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { TeamService } from './api/team.service';\nimport { UserService } from './api/user.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    TeamService,\n    UserService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n",
    "/**\n * Myworkout API\n * Documentation for Myworkout API. \n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TeamMember { \n    /**\n     * team member id\n     */\n    id?: number;\n    /**\n     * team member name\n     */\n    name?: string;\n    role?: TeamMember.RoleEnum;\n}\nexport namespace TeamMember {\n    export type RoleEnum = 'member' | 'captain';\n    export const RoleEnum = {\n        Member: 'member' as RoleEnum,\n        Captain: 'captain' as RoleEnum\n    };\n}\n",
    "export * from './team.service';\nimport { TeamService } from './team.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport const APIS = [TeamService, UserService];\n",
    "/**\n * Myworkout API\n * Documentation for Myworkout API. \n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { GetUsersResponse } from '../model/getUsersResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n    protected basePath = 'http://localhost:8080/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n\n        if (configuration) {\n            this.configuration = configuration;\n            this.configuration.basePath = configuration.basePath || basePath || this.basePath;\n\n        } else {\n            this.configuration.basePath = basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get list of registered users\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<GetUsersResponse>;\n    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetUsersResponse>>;\n    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetUsersResponse>>;\n    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<GetUsersResponse>(`${this.configuration.basePath}/users`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "/**\n * Myworkout API\n * Documentation for Myworkout API. \n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { GetTeamInvitationsResponse } from '../model/getTeamInvitationsResponse';\nimport { GetTeamMembersResponse } from '../model/getTeamMembersResponse';\nimport { GetTeamsResponse } from '../model/getTeamsResponse';\nimport { UpdateTeamMembersInput } from '../model/updateTeamMembersInput';\nimport { UpdateTeamMembersResponse } from '../model/updateTeamMembersResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n    protected basePath = 'http://localhost:8080/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n\n        if (configuration) {\n            this.configuration = configuration;\n            this.configuration.basePath = configuration.basePath || basePath || this.basePath;\n\n        } else {\n            this.configuration.basePath = basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get list of invitations to a team\n     * \n     * @param teamId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTeamInvitations(teamId: number, observe?: 'body', reportProgress?: boolean): Observable<GetTeamInvitationsResponse>;\n    public getTeamInvitations(teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTeamInvitationsResponse>>;\n    public getTeamInvitations(teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTeamInvitationsResponse>>;\n    public getTeamInvitations(teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (teamId === null || teamId === undefined) {\n            throw new Error('Required parameter teamId was null or undefined when calling getTeamInvitations.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<GetTeamInvitationsResponse>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(teamId))}/invitations`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of members in teams\n     * \n     * @param teamId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTeamMembers(teamId: number, observe?: 'body', reportProgress?: boolean): Observable<GetTeamMembersResponse>;\n    public getTeamMembers(teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTeamMembersResponse>>;\n    public getTeamMembers(teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTeamMembersResponse>>;\n    public getTeamMembers(teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (teamId === null || teamId === undefined) {\n            throw new Error('Required parameter teamId was null or undefined when calling getTeamMembers.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<GetTeamMembersResponse>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(teamId))}/members`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of teams\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTeams(observe?: 'body', reportProgress?: boolean): Observable<GetTeamsResponse>;\n    public getTeams(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTeamsResponse>>;\n    public getTeams(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTeamsResponse>>;\n    public getTeams(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<GetTeamsResponse>(`${this.configuration.basePath}/teams`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update members of a team\n     * \n     * @param teamId \n     * @param UpdateTeamMembersInput \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateTeamMembers(teamId: number, UpdateTeamMembersInput: UpdateTeamMembersInput, observe?: 'body', reportProgress?: boolean): Observable<UpdateTeamMembersResponse>;\n    public updateTeamMembers(teamId: number, UpdateTeamMembersInput: UpdateTeamMembersInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTeamMembersResponse>>;\n    public updateTeamMembers(teamId: number, UpdateTeamMembersInput: UpdateTeamMembersInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTeamMembersResponse>>;\n    public updateTeamMembers(teamId: number, UpdateTeamMembersInput: UpdateTeamMembersInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (teamId === null || teamId === undefined) {\n            throw new Error('Required parameter teamId was null or undefined when calling updateTeamMembers.');\n        }\n        if (UpdateTeamMembersInput === null || UpdateTeamMembersInput === undefined) {\n            throw new Error('Required parameter UpdateTeamMembersInput was null or undefined when calling updateTeamMembers.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<UpdateTeamMembersResponse>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(teamId))}/members`,\n            UpdateTeamMembersInput,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
